import os
import uuid
import discord
import datetime
import re

from dotenv import load_dotenv

from tools.logger import Logger
from database.db_manager import DatabaseManager
from tools.notification_manager import NotificationManager
from tools.log_manager import LogManager

load_dotenv()

logger = Logger.get_instance()
db_manager = DatabaseManager.get_instance()

REPORT_LOG_CHANNEL=int(os.getenv('REPORT_LOG_CHANNEL'))
ORDER_LOG_CHANNEL=int(os.getenv('ORDER_LOG_CHANNEL'))

def create_reaction_buttons():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–∞–∫—Ü–∏–∏

    Returns:
        –ö–æ—Ä—Ç–µ–∂ –∏–∑ –¥–≤—É—Ö ID (approve_id, reject_id)
    """
    approve_id = f"approve_{str(uuid.uuid4())[:8]}"
    reject_id = f"reject_{str(uuid.uuid4())[:8]}"
    return approve_id, reject_id

class ReactionView(discord.ui.View):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∑–∞—è–≤–∫—É"""

    def __init__(self, bot, user, content_type, message_id=None, channel_id=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏

        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏–π –∑–∞—è–≤–∫—É
            content_type: –¢–∏–ø –∑–∞—è–≤–∫–∏ (–∂–∞–ª–æ–±–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î)
            channel_id: ID –∫–∞–Ω–∞–ª–∞ (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î)
        """
        super().__init__(timeout=None)

        self.bot = bot
        self.user = user
        self.content_type = content_type

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã
        if message_id and channel_id:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–∏
            buttons = db_manager.get_reaction_buttons(message_id, channel_id)

            if buttons:
                self.approve_id = buttons.get('approve_button_id')
                self.reject_id = buttons.get('reject_button_id')
            else:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ ID
                self.approve_id, self.reject_id = create_reaction_buttons()
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ ID –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
            self.approve_id, self.reject_id = create_reaction_buttons()

        self.add_item(discord.ui.Button(
            style=discord.ButtonStyle.success,
            label="–û–¥–æ–±—Ä–∏—Ç—å",
            custom_id=self.approve_id
        ))

        self.add_item(discord.ui.Button(
            style=discord.ButtonStyle.danger,
            label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            custom_id=self.reject_id
        ))

class RejectionModal(discord.ui.Modal, title="–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"):
    """
    –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏

    Attributes:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞–≤—à–∏–π –∑–∞—è–≤–∫—É
    """
    reason = discord.ui.TextInput(
        label="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞",
        placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏...",
        style=discord.TextStyle.paragraph,
        required=True,
        max_length=1000
    )

    def __init__(self, bot, message, user):
        super().__init__()
        self.bot = bot
        self.message = message
        self.user = user

    async def on_submit(self, interaction: discord.Interaction):
        channel = self.message.channel
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        if "–∂–∞–ª–æ–±–∞" in channel.name:
            content_type = "–∂–∞–ª–æ–±–∞"
            log_channel = REPORT_LOG_CHANNEL
        elif "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" in channel.name:
            content_type = "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
            log_channel = REPORT_LOG_CHANNEL
        elif "–∑–∞–ø—Ä–æ—Å" in channel.name:
            content_type = "–∑–∞–ø—Ä–æ—Å"
            log_channel = ORDER_LOG_CHANNEL
        else:
            content_type = "–∑–∞—è–≤–∫–∞"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            log_channel = REPORT_LOG_CHANNEL

        current_date = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")

        db_manager.log_reaction_action(
            self.message.id,
            channel.id,
            self.user.id,
            interaction.user.id,
            "reject",
            self.reason.value
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª
        await LogManager.send_log_message(
            bot=self.bot,
            user=self.user,
            content_type=content_type,
            action="–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            message=self.message,
            reason=self.reason.value,
            author=interaction.user,
            log_channel_id=log_channel
        )

        await interaction.response.defer()

        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        embed = discord.Embed(
            title=f"{content_type.capitalize()} {'–æ—Ç–∫–ª–æ–Ω–µ–Ω' if content_type == '–∑–∞–ø—Ä–æ—Å' else ('–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ' if content_type == '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')}", 
            description=f"–í–∞—à{'' if content_type == '–∑–∞–ø—Ä–æ—Å' else ('–µ' if content_type == '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' else '–∞')} {content_type} {'–æ—Ç–∫–ª–æ–Ω–µ–Ω' if content_type == '–∑–∞–ø—Ä–æ—Å' else ('–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ' if content_type == '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user.mention}.", 
            color=discord.Color.red()
        )

        if self.message.embeds:
            original_embed = self.message.embeds[0]
            for field in original_embed.fields:
                # –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º –ø–æ–ª–µ "–û—Ç –∫–æ–≥–æ"/"–ó–∞–∫–∞–∑—á–∏–∫", "–°—Ç–∞—Ç—É—Å", "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞" –∏ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —Å—Ç–∞—Ç–∏–∫–∞–º"
                if field.name not in ["–û—Ç –∫–æ–≥–æ", "üë§ –ó–∞–∫–∞–∑—á–∏–∫", "–°—Ç–∞—Ç—É—Å", "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞", "üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —Å—Ç–∞—Ç–∏–∫–∞–º"]:
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–µ "–ò–≥—Ä–æ–≤—ã–µ —Å—Ç–∞—Ç–∏–∫–∏" –∏–ª–∏ "üéÆ –ò–≥—Ä–æ–≤—ã–µ —Å—Ç–∞—Ç–∏–∫–∏", –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                    if field.name in ["–ò–≥—Ä–æ–≤—ã–µ —Å—Ç–∞—Ç–∏–∫–∏", "üéÆ –ò–≥—Ä–æ–≤—ã–µ —Å—Ç–∞—Ç–∏–∫–∏"]:
                        # –£–¥–∞–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–∞—Ç–∏–∫–∏ (4-6 —Ü–∏—Ñ—Ä) –∏–∑ —Ç–µ–∫—Å—Ç–∞
                        value = field.value
                        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–¥–∞ (–æ–±—Ä–∞–º–ª–µ–Ω–æ ```), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —á–∞—Å—Ç—å
                        if value.startswith("```") and value.endswith("```"):
                            inner_text = value[3:-3]  # –£–¥–∞–ª—è–µ–º ```
                            # –ó–∞–º–µ–Ω—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–∞—Ç–∏–∫–∏ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                            filtered_text = re.sub(r'\b\d{4,6}\b', '', inner_text)
                            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã
                            filtered_text = re.sub(r'\s+', ' ', filtered_text).strip()
                            # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
                            filtered_text = re.sub(r'(\s‚Ä¢\s)+', ' ‚Ä¢ ', filtered_text)
                            filtered_text = re.sub(r'^‚Ä¢\s', '', filtered_text)  # –£–¥–∞–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                            filtered_text = re.sub(r'\s‚Ä¢$', '', filtered_text)  # –£–¥–∞–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                            
                            # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–µ
                            if filtered_text and not filtered_text.isspace() and filtered_text != "‚Ä¢":
                                embed.add_field(name=field.name, value=f"```{filtered_text}```", inline=field.inline)
                        else:
                            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–¥–∞
                            filtered_text = re.sub(r'\b\d{4,6}\b', '', value)
                            filtered_text = re.sub(r'\s+', ' ', filtered_text).strip()
                            
                            if filtered_text and not filtered_text.isspace():
                                embed.add_field(name=field.name, value=filtered_text, inline=field.inline)
                    else:
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                        embed.add_field(name=field.name, value=field.value, inline=field.inline)

        embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞", value=self.reason.value, inline=False)
        embed.set_footer(text=f"{current_date}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await NotificationManager.send_decision_notification(
            self.user, 
            embed
        )

        try:
            await channel.delete(reason=f"{content_type.capitalize()} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user.name}")
            logger.info(f"–ö–∞–Ω–∞–ª {channel.name} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è {content_type}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel.name}: {e}", exc_info=True)
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await channel.send(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.")
            except:
                pass

async def handle_reaction_button(bot, interaction):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–∞–∫—Ü–∏–∏

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        interaction: –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    """
    button_id = interaction.data.get('custom_id')

    button_info = db_manager.get_button_info_by_id(button_id)

    if not button_info:
        logger.warning(f"–ö–Ω–æ–ø–∫–∞ —Å ID {button_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        await interaction.response.send_message(
            "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.", 
            ephemeral=True
        )
        return

    channel = bot.get_channel(int(button_info['channel_id']))

    if not channel:
        logger.warning(f"–ö–∞–Ω–∞–ª —Å ID {button_info['channel_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await interaction.response.send_message(
            "–ö–∞–Ω–∞–ª –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", 
            ephemeral=True
        )
        return

    try:
        message = await channel.fetch_message(int(button_info['message_id']))
    except discord.NotFound:
        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {button_info['message_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await interaction.response.send_message(
            "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", 
            ephemeral=True
        )
        return

    user_id = None
    user = None
    content_type = button_info['type']

    if message.embeds:
        embed = message.embeds[0]
        # –ò—â–µ–º –ø–æ–ª–µ "–û—Ç –∫–æ–≥–æ"
        for field in embed.fields:
            if field.name == "–û—Ç –∫–æ–≥–æ":
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                if field.value and "<@" in field.value:
                    user_id = field.value.split("<@")[1].split(">")[0]
                    try:
                        user = await bot.fetch_user(int(user_id))
                    except:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}")
                break

    if not user:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —ç–º–±–µ–¥–∞")
        user = interaction.user

    if button_info['is_approve']:
        # –ö–Ω–æ–ø–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è
        await handle_approve(bot, interaction, message, user)
    else:
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        await handle_reject(bot, interaction, message, user)

async def handle_approve(bot, interaction, message, user):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–¥–æ–±—Ä–µ–Ω–∏—è

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        interaction: –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏–π –∑–∞—è–≤–∫—É
    """
    channel = message.channel
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    if "–∂–∞–ª–æ–±–∞" in channel.name:
        content_type = "–∂–∞–ª–æ–±–∞"
        log_channel = REPORT_LOG_CHANNEL
    elif "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" in channel.name:
        content_type = "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
        log_channel = REPORT_LOG_CHANNEL
    elif "–∑–∞–ø—Ä–æ—Å" in channel.name:
        content_type = "–∑–∞–ø—Ä–æ—Å"
        log_channel = ORDER_LOG_CHANNEL
    else:
        content_type = "–∑–∞—è–≤–∫–∞"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        log_channel = REPORT_LOG_CHANNEL

    current_date = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_manager.log_reaction_action(
        message.id,
        channel.id,
        user.id,
        interaction.user.id,
        "approve",
        None  # –ù–µ—Ç –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª
    await LogManager.send_log_message(
        bot=bot,
        user=user,
        content_type=content_type,
        action="–æ–¥–æ–±—Ä–µ–Ω–∞",
        message=message,
        reason=None,
        author=interaction.user,
        log_channel_id=log_channel
    )

    await interaction.response.defer()

    # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    embed = discord.Embed(
        title=f"{content_type.capitalize()} {'–æ–¥–æ–±—Ä–µ–Ω' if content_type == '–∑–∞–ø—Ä–æ—Å' else ('–æ–¥–æ–±—Ä–µ–Ω–æ' if content_type == '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' else '–æ–¥–æ–±—Ä–µ–Ω–∞')}", 
        description=f"–í–∞—à{'' if content_type == '–∑–∞–ø—Ä–æ—Å' else ('–µ' if content_type == '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' else '–∞')} {content_type} {'–æ–¥–æ–±—Ä–µ–Ω' if content_type == '–∑–∞–ø—Ä–æ—Å' else ('–æ–¥–æ–±—Ä–µ–Ω–æ' if content_type == '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' else '–æ–¥–æ–±—Ä–µ–Ω–∞')} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user.mention}.", 
        color=discord.Color.green()
    )

    if message.embeds:
        original_embed = message.embeds[0]
        for field in original_embed.fields:
            if field.name not in ["–û—Ç –∫–æ–≥–æ", "–°—Ç–∞—Ç—É—Å"]:
                embed.add_field(name=field.name, value=field.value, inline=field.inline)

    embed.set_footer(text=f"{current_date}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await NotificationManager.send_decision_notification(
        user, 
        embed
    )

    try:
        await channel.delete(reason=f"{content_type.capitalize()} –æ–¥–æ–±—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user.name}")
        logger.info(f"–ö–∞–Ω–∞–ª {channel.name} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è {content_type}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel.name}: {e}", exc_info=True)
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await channel.send(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.")
        except:
            pass

async def handle_reject(bot, interaction, message, user):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        interaction: –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏–π –∑–∞—è–≤–∫—É
    """
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    modal = RejectionModal(bot, message, user)
    await interaction.response.send_modal(modal) 