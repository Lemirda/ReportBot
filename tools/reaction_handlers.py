import os
import uuid
import discord
import re

from dotenv import load_dotenv

from tools.logger import Logger
from database.db_manager import DatabaseManager
from tools.notification_manager import NotificationManager
from tools.log_manager import LogManager
from tools.embed import EmbedBuilder

load_dotenv()

logger = Logger.get_instance()
db_manager = DatabaseManager.get_instance()

REPORT_LOG_CHANNEL=int(os.getenv('REPORT_LOG_CHANNEL'))
ORDER_LOG_CHANNEL=int(os.getenv('ORDER_LOG_CHANNEL'))

def create_reaction_buttons():
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–∞–∫—Ü–∏–∏"""
    approve_id = f"approve_{str(uuid.uuid4())[:8]}"
    reject_id = f"reject_{str(uuid.uuid4())[:8]}"
    return approve_id, reject_id

class ReactionView(discord.ui.View):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∑–∞—è–≤–∫—É"""
    
    def __init__(self, message, user):
        super().__init__(timeout=None)
        self.message = message
        self.user = user
        
        approve_id, reject_id = create_reaction_buttons()
        
        approve_button = discord.ui.Button(
            style=discord.ButtonStyle.success,
            label="–û–¥–æ–±—Ä–∏—Ç—å",
            emoji="‚úÖ",
            custom_id=approve_id
        )
        
        reject_button = discord.ui.Button(
            style=discord.ButtonStyle.danger,
            label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            emoji="‚ùå",
            custom_id=reject_id
        )
        
        self.add_item(approve_button)
        self.add_item(reject_button)

class RejectReasonModal(discord.ui.Modal, title="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    
    reason = discord.ui.TextInput(
        label="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è",
        placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è...",
        required=True,
        style=discord.TextStyle.paragraph,
        max_length=1000
    )
    
    def __init__(self, message, user):
        super().__init__()
        self.message = message
        self.user = user
    
    async def on_submit(self, interaction: discord.Interaction):
        channel = self.message.channel
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∏–º–µ–Ω–∏
        channel_name = channel.name.lower()
        if "–∂–∞–ª–æ–±–∞" in channel_name:
            content_type = "–∂–∞–ª–æ–±–∞"
            status = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        elif "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" in channel_name:
            content_type = "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
            status = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        elif "–∑–∞–ø—Ä–æ—Å" in channel_name:
            content_type = "–∑–∞–ø—Ä–æ—Å"
            status = "–æ—Ç–∫–ª–æ–Ω–µ–Ω"
        elif "–ø–æ–≤—ã—à–µ–Ω–∏–µ" in channel_name:
            content_type = "–ø–æ–≤—ã—à–µ–Ω–∏–µ"
            status = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        else:
            content_type = "–∑–∞—è–≤–∫–∞"
            status = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        embed = EmbedBuilder.create_decision_embed(
            content_type=content_type,
            is_approved=False,
            moderator=interaction.user,
            original_embed=self.message.embeds[0] if self.message.embeds else None,
            reason=self.reason.value
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await NotificationManager.send_decision_notification(
            self.user, 
            embed
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª, –µ—Å–ª–∏ —ç—Ç–æ –∂–∞–ª–æ–±–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å
        try:
            if content_type == "–∂–∞–ª–æ–±–∞" and REPORT_LOG_CHANNEL:
                log_channel = interaction.guild.get_channel(REPORT_LOG_CHANNEL)
                if log_channel:
                    await LogManager.send_decision_log(
                        channel=log_channel,
                        content_type=content_type,
                        status=status,
                        color=discord.Color.red(),
                        user=self.user,
                        moderator=interaction.user,
                        reason=self.reason.value,
                        original_embed=self.message.embeds[0] if self.message.embeds else None
                    )
            elif content_type == "–∑–∞–ø—Ä–æ—Å" and ORDER_LOG_CHANNEL:
                log_channel = interaction.guild.get_channel(ORDER_LOG_CHANNEL)
                if log_channel:
                    await LogManager.send_decision_log(
                        channel=log_channel,
                        content_type=content_type,
                        status=status,
                        color=discord.Color.red(),
                        user=self.user,
                        moderator=interaction.user,
                        reason=self.reason.value,
                        original_embed=self.message.embeds[0] if self.message.embeds else None
                    )
            elif content_type == "–ø–æ–≤—ã—à–µ–Ω–∏–µ" and os.getenv('PROMOTION_LOG_CHANNEL'):
                promotion_log_channel_id = int(os.getenv('PROMOTION_LOG_CHANNEL'))
                log_channel = interaction.guild.get_channel(promotion_log_channel_id)
                if log_channel:
                    await LogManager.send_decision_log(
                        channel=log_channel,
                        content_type=content_type,
                        status=status,
                        color=discord.Color.red(),
                        user=self.user,
                        moderator=interaction.user,
                        reason=self.reason.value,
                        original_embed=self.message.embeds[0] if self.message.embeds else None
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ —Ä–µ—à–µ–Ω–∏—è: {e}", exc_info=True)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º defer() –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        await interaction.response.defer()

        try:
            await channel.delete(reason=f"{content_type.capitalize()} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user.name}")
            logger.info(f"–ö–∞–Ω–∞–ª {channel.name} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è {content_type}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel.name}: {e}", exc_info=True)
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await channel.send(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.")
            except:
                pass

async def handle_approve(bot, interaction, message, user):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–¥–æ–±—Ä–∏—Ç—å"
    
    Args:
        bot: –ë–æ—Ç Discord
        interaction: –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Å—Ç–∞–≤–∏–≤—à–∏–π –∑–∞—è–≤–∫—É
        
    Returns:
        None
    """
    channel = message.channel
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
    channel_name = channel.name.lower()
    if "–∂–∞–ª–æ–±–∞" in channel_name:
        content_type = "–∂–∞–ª–æ–±–∞"
        status = "–æ–¥–æ–±—Ä–µ–Ω–∞"
    elif "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" in channel_name:
        content_type = "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
        status = "–æ–¥–æ–±—Ä–µ–Ω–æ"
    elif "–∑–∞–ø—Ä–æ—Å" in channel_name:
        content_type = "–∑–∞–ø—Ä–æ—Å"
        status = "–æ–¥–æ–±—Ä–µ–Ω"
    elif "–ø–æ–≤—ã—à–µ–Ω–∏–µ" in channel_name:
        content_type = "–ø–æ–≤—ã—à–µ–Ω–∏–µ"
        status = "–æ–¥–æ–±—Ä–µ–Ω–æ"
    else:
        content_type = "–∑–∞—è–≤–∫–∞"
        status = "–æ–¥–æ–±—Ä–µ–Ω–∞"
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–∫–∞–∑–∞
    order_id = None
    if content_type == "–∑–∞–ø—Ä–æ—Å" and message.embeds:
        # –ò—â–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ —Ñ—É—Ç–µ—Ä–µ –ø–µ—Ä–≤–æ–≥–æ —ç–º–±–µ–¥–∞
        footer_text = message.embeds[0].footer.text
        id_match = re.search(r'ID –∑–∞–∫–∞–∑–∞: (ORD-\d+-\d+)', footer_text)
        if id_match:
            order_id = id_match.group(1)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–∫–∞–∑, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ
    order_price = None
    if content_type == "–∑–∞–ø—Ä–æ—Å" and message.embeds:
        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –≤ –ø–æ–ª—è—Ö —ç–º–±–µ–¥–∞
        for field in message.embeds[0].fields:
            if field.name == "üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
                price_match = re.search(r'–°—Ç–æ–∏–º–æ—Å—Ç—å: ([\d.,\- +]+)', field.value)
                if price_match:
                    order_price = price_match.group(1)
                break
                
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—ã—à–µ–Ω–∏–µ, –≤—ã–¥–∞–µ–º —Ä–æ–ª—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞
    if content_type == "–ø–æ–≤—ã—à–µ–Ω–∏–µ" and message.embeds:
        try:
            next_rank = None
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—è —ç–º–±–µ–¥–∞
            if message.embeds[0].fields:
                user_field = message.embeds[0].fields[0]
                if user_field.name == "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å":
                    rank_match = re.search(r'—Å (\d+) —Ä–∞–Ω–≥–∞ –Ω–∞ (\d+) —Ä–∞–Ω–≥', user_field.value)
                    if rank_match:
                        current_rank = int(rank_match.group(1))
                        next_rank = int(rank_match.group(2))
                        
            if next_rank:
                # –ü–æ–ª—É—á–∞–µ–º ID —Ä–æ–ª–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–Ω–≥–∞
                rank_role_id = int(os.getenv(f'RANK_{next_rank}', 0))
                
                if rank_role_id:
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–æ–ª–∏
                    rank_role = interaction.guild.get_role(rank_role_id)
                    
                    if rank_role:
                        # –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                        member = interaction.guild.get_member(user.id)
                        
                        if member:
                            # –í—ã–¥–∞–µ–º —Ä–æ–ª—å
                            await member.add_roles(rank_role)
                            logger.info(f"–†–æ–ª—å {rank_role.name} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.name} –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Å {current_rank} –¥–æ {next_rank} —Ä–∞–Ω–≥–∞")
                            
                            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ä–æ–ª—å —Ä–∞–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                            if current_rank > 0:
                                prev_rank_role_id = int(os.getenv(f'RANK_{current_rank}', 0))
                                if prev_rank_role_id:
                                    prev_rank_role = interaction.guild.get_role(prev_rank_role_id)
                                    if prev_rank_role and prev_rank_role in member.roles:
                                        await member.remove_roles(prev_rank_role)
                                        logger.info(f"–†–æ–ª—å {prev_rank_role.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name} –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏")
                        else:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user.name} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏")
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–ª—å —Å ID {rank_role_id} –¥–ª—è —Ä–∞–Ω–≥–∞ {next_rank}")
                else:
                    logger.warning(f"ID —Ä–æ–ª–∏ –¥–ª—è —Ä–∞–Ω–≥–∞ {next_rank} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–æ–ª–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è: {e}", exc_info=True)

    # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    embed = EmbedBuilder.create_decision_embed(
        content_type=content_type,
        is_approved=True,
        moderator=interaction.user,
        original_embed=message.embeds[0] if message.embeds else None
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await NotificationManager.send_decision_notification(
        user, 
        embed
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª, –µ—Å–ª–∏ —ç—Ç–æ –∂–∞–ª–æ–±–∞, –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ
    try:
        if content_type == "–∂–∞–ª–æ–±–∞" and REPORT_LOG_CHANNEL:
            log_channel = interaction.guild.get_channel(REPORT_LOG_CHANNEL)
            if log_channel:
                await LogManager.send_decision_log(
                    channel=log_channel,
                    content_type=content_type,
                    status=status,
                    color=discord.Color.green(),
                    user=user,
                    moderator=interaction.user,
                    original_embed=message.embeds[0] if message.embeds else None
                )
        elif content_type == "–∑–∞–ø—Ä–æ—Å" and ORDER_LOG_CHANNEL:
            log_channel = interaction.guild.get_channel(ORDER_LOG_CHANNEL)
            if log_channel:
                await LogManager.send_decision_log(
                    channel=log_channel,
                    content_type=content_type,
                    status=status,
                    color=discord.Color.green(),
                    user=user,
                    moderator=interaction.user,
                    order_id=order_id,
                    order_price=order_price,
                    original_embed=message.embeds[0] if message.embeds else None
                )
        elif content_type == "–ø–æ–≤—ã—à–µ–Ω–∏–µ" and os.getenv('PROMOTION_LOG_CHANNEL'):
            promotion_log_channel_id = int(os.getenv('PROMOTION_LOG_CHANNEL'))
            log_channel = interaction.guild.get_channel(promotion_log_channel_id)
            if log_channel:
                await LogManager.send_decision_log(
                    channel=log_channel,
                    content_type=content_type,
                    status=status,
                    color=discord.Color.green(),
                    user=user,
                    moderator=interaction.user,
                    original_embed=message.embeds[0] if message.embeds else None
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ —Ä–µ—à–µ–Ω–∏—è: {e}", exc_info=True)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º defer() –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    await interaction.response.defer()
    
    try:
        await channel.delete(reason=f"{content_type.capitalize()} –æ–¥–æ–±—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user.name}")
        logger.info(f"–ö–∞–Ω–∞–ª {channel.name} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è {content_type}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel.name}: {e}", exc_info=True)
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await channel.send(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.")
        except:
            pass

async def handle_reject(bot, interaction, message, user):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
    
    Args:
        bot: –ë–æ—Ç Discord
        interaction: –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Å—Ç–∞–≤–∏–≤—à–∏–π –∑–∞—è–≤–∫—É
        
    Returns:
        None
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    modal = RejectReasonModal(message, user)
    await interaction.response.send_modal(modal)

async def handle_reaction_button(bot, interaction):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–∞–∫—Ü–∏–∏
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        interaction: –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
        
    Returns:
        None
    """
    custom_id = interaction.data.get('custom_id', '')
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞
    channel = interaction.channel
    
    try:
        # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω view
        async for message in channel.history(limit=100):
            if message.author == bot.user and message.components:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞ —Å –Ω—É–∂–Ω—ã–º ID
                for row in message.components:
                    for item in row.children:
                        if item.custom_id == custom_id:
                            # –ù–∞—à–ª–∏ –Ω—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                            break
                    else:
                        continue
                    break
                else:
                    continue
                break
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π {custom_id}")
            await interaction.response.send_message(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π", 
                ephemeral=True
            )
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π: {e}", exc_info=True)
        await interaction.response.send_message(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏", 
            ephemeral=True
        )
        return
    
    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç–º–±–µ–¥–µ
    user = None
    if message.embeds:
        embed = message.embeds[0]
        # –ò—â–µ–º –ø–æ–ª–µ "–û—Ç –∫–æ–≥–æ" –∏–ª–∏ "–ó–∞–∫–∞–∑—á–∏–∫"
        for field in embed.fields:
            if field.name in ["–û—Ç –∫–æ–≥–æ", "üë§ –ó–∞–∫–∞–∑—á–∏–∫", "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"]:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                mention = field.value
                user_id_match = re.search(r'<@(\d+)>', mention)
                if user_id_match:
                    user_id = int(user_id_match.group(1))
                    try:
                        user = await bot.fetch_user(user_id)
                        break
                    except:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}")
    
    if not user:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —ç–º–±–µ–¥–∞")
        await interaction.response.send_message(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –∑–∞—è–≤–∫–∏", 
            ephemeral=True
        )
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
    if custom_id.startswith("approve_"):
        await handle_approve(bot, interaction, message, user)
    elif custom_id.startswith("reject_"):
        await handle_reject(bot, interaction, message, user)
    else:
        await interaction.response.send_message(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–Ω–æ–ø–∫–∏", 
            ephemeral=True
        ) 